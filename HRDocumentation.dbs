<?xml version="1.0" encoding="UTF-8" ?>
<project name="SqlServer" database="SqlServer" id="SqlServer-2604" >
	<schema name="dbo" catalogname="HR" >
		<table name="countries" row_count="25" spec="" >
			<column name="country_id" type="char" length="2" jt="1" mandatory="y" />
			<column name="country_name" type="varchar" length="40" jt="12" />
			<column name="region_id" type="int" jt="4" mandatory="y" />
			<index name="PK__countrie__7E8CD055516C4125" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="country_id" options=" asc" />
			</index>
			<fk name="FK__countries__regio__286302EC" to_schema="HR.dbo" to_table="regions" delete_action="cascade" update_action="cascade" options="" >
				<fk_column name="region_id" pk="region_id" />
			</fk>
		</table>
		<table name="departments" row_count="12" spec="" >
			<column name="department_id" type="int" jt="4" mandatory="y" />
			<column name="department_name" type="varchar" length="30" jt="12" mandatory="y" />
			<column name="location_id" type="int" jt="4" />
			<index name="PK__departme__C2232422993866B9" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="department_id" options=" asc" />
			</index>
			<fk name="FK__departmen__locat__35BCFE0A" to_schema="HR.dbo" to_table="locations" delete_action="cascade" update_action="cascade" options="" >
				<fk_column name="location_id" pk="location_id" />
			</fk>
		</table>
		<table name="dependents" row_count="30" spec="" >
			<column name="dependent_id" type="int" jt="4" mandatory="y" />
			<column name="first_name" type="varchar" length="50" jt="12" mandatory="y" />
			<column name="last_name" type="varchar" length="50" jt="12" mandatory="y" />
			<column name="relationship" type="varchar" length="25" jt="12" mandatory="y" />
			<column name="employee_id" type="int" jt="4" mandatory="y" />
			<index name="PK__dependen__F25E28CEFC8D96B1" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="dependent_id" options=" asc" />
			</index>
			<fk name="FK__dependent__emplo__412EB0B6" to_schema="HR.dbo" to_table="employees" delete_action="cascade" update_action="cascade" options="" >
				<fk_column name="employee_id" pk="employee_id" />
			</fk>
		</table>
		<table name="employees" row_count="41" spec="" >
			<column name="employee_id" type="int" jt="4" mandatory="y" />
			<column name="first_name" type="varchar" length="20" jt="12" />
			<column name="last_name" type="varchar" length="25" jt="12" mandatory="y" />
			<column name="email" type="varchar" length="100" jt="12" mandatory="y" />
			<column name="phone_number" type="varchar" length="20" jt="12" />
			<column name="hire_date" type="date" jt="91" mandatory="y" />
			<column name="job_id" type="int" jt="4" mandatory="y" />
			<column name="salary" type="decimal" length="8" decimal="2" jt="3" mandatory="y" />
			<column name="manager_id" type="int" jt="4" />
			<column name="department_id" type="int" jt="4" />
			<index name="PK__employee__C52E0BA8EF649669" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="employee_id" options=" asc" />
			</index>
			<fk name="FK__employees__depar__3D5E1FD2" to_schema="HR.dbo" to_table="departments" delete_action="cascade" update_action="cascade" options="" >
				<fk_column name="department_id" pk="department_id" />
			</fk>
			<fk name="FK__employees__job_i__3C69FB99" to_schema="HR.dbo" to_table="jobs" delete_action="cascade" update_action="cascade" options="" >
				<fk_column name="job_id" pk="job_id" />
			</fk>
			<fk name="FK__employees__manag__3E52440B" to_schema="HR.dbo" to_table="employees" options="" >
				<fk_column name="manager_id" pk="employee_id" />
			</fk>
		</table>
		<table name="jobs" row_count="19" spec="" >
			<column name="job_id" type="int" jt="4" mandatory="y" />
			<column name="job_title" type="varchar" length="35" jt="12" mandatory="y" />
			<column name="min_salary" type="decimal" length="8" decimal="2" jt="3" />
			<column name="max_salary" type="decimal" length="8" decimal="2" jt="3" />
			<index name="PK__jobs__6E32B6A5BECF7357" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="job_id" options=" asc" />
			</index>
		</table>
		<table name="locations" row_count="8" spec="" >
			<column name="location_id" type="int" jt="4" mandatory="y" />
			<column name="street_address" type="varchar" length="40" jt="12" />
			<column name="postal_code" type="varchar" length="12" jt="12" />
			<column name="city" type="varchar" length="30" jt="12" mandatory="y" />
			<column name="state_province" type="varchar" length="25" jt="12" />
			<column name="country_id" type="char" length="2" jt="1" mandatory="y" />
			<index name="PK__location__771831EA91FF48E0" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="location_id" options=" asc" />
			</index>
			<fk name="FK__locations__count__2E1BDC42" to_schema="HR.dbo" to_table="countries" delete_action="cascade" update_action="cascade" options="" >
				<fk_column name="country_id" pk="country_id" />
			</fk>
		</table>
		<table name="regions" row_count="8" spec="" >
			<column name="region_id" type="int" jt="4" mandatory="y" />
			<column name="region_name" type="varchar" length="25" jt="12" />
			<index name="PK__regions__01146BAEAB663DE0" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="region_id" options=" asc" />
			</index>
		</table>
		<table name="sysdiagrams" row_count="1" spec="" >
			<comment><![CDATA[1]]></comment>
			<column name="name" type="sysname" jt="12" mandatory="y" />
			<column name="principal_id" type="int" jt="4" mandatory="y" />
			<column name="diagram_id" type="int" jt="4" mandatory="y" >
				<identity><![CDATA[IDENTITY]]></identity>
			</column>
			<column name="version" type="int" jt="4" />
			<column name="definition" type="varbinary(max)" jt="-3" />
			<index name="PK__sysdiagr__C2B05B6116B73FE5" unique="PRIMARY_KEY" spec=" CLUSTERED" >
				<column name="diagram_id" options=" asc" />
			</index>
			<index name="UK_principal_name" unique="UNIQUE_KEY" spec="      NONCLUSTERED" >
				<column name="principal_id" options=" asc" />
				<column name="name" options=" asc" />
			</index>
		</table>
		<view name="DeptByState" >
			<view_script><![CDATA[CREATE VIEW ${schemaName}.${viewName}
AS
SELECT departments.department_name, locations.state_province, employees.salary
FROM     departments INNER JOIN
                  employees ON departments.department_id = employees.department_id INNER JOIN
                  locations ON departments.location_id = locations.location_id
				  WHERE locations.state_province = 'Washington']]></view_script>
			<column name="department_name" type="varchar" />
			<column name="state_province" type="varchar" />
			<column name="salary" type="decimal" />
		</view>
		<view name="empdep" >
			<view_script><![CDATA[CREATE VIEW ${schemaName}.${viewName}
AS
SELECT d.department_name, COUNT(e.employee_id) AS NumOfEmployees
FROM dbo.employees AS e
INNER JOIN dbo.departments AS d
ON e.department_id = d.department_id
GROUP BY d.department_name]]></view_script>
			<column name="department_name" type="varchar" />
			<column name="NumOfEmployees" type="int" />
		</view>
		<procedure name="sp_alterdiagram" id="Procedure-800" isSystem="false" params_known="y" >
			<string><![CDATA[
	CREATE PROCEDURE dbo.sp_alterdiagram
	(
		@diagramname 	sysname,
		@owner_id	int	= null,
		@version 	int,
		@definition 	varbinary(max)
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
	
		declare @theId 			int
		declare @retval 		int
		declare @IsDbo 			int
		
		declare @UIDFound 		int
		declare @DiagId			int
		declare @ShouldChangeUID	int
	
		if(@diagramname is null)
		begin
			RAISERROR ('Invalid ARG', 16, 1)
			return -1
		end
	
		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID();	 
		select @IsDbo = IS_MEMBER(N'db_owner'); 
		if(@owner_id is null)
			select @owner_id = @theId;
		revert;
	
		select @ShouldChangeUID = 0
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname 
		
		if(@DiagId IS NULL or (@IsDbo = 0 and @theId <> @UIDFound))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1);
			return -3
		end
	
		if(@IsDbo <> 0)
		begin
			if(@UIDFound is null or USER_NAME(@UIDFound) is null) -- invalid principal_id
			begin
				select @ShouldChangeUID = 1 ;
			end
		end
		-- update dds data			
		update dbo.sysdiagrams set definition = @definition where diagram_id = @DiagId ;
		-- change owner
		if(@ShouldChangeUID = 1)
			update dbo.sysdiagrams set principal_id = @theId where diagram_id = @DiagId ;
		-- update dds version
		if(@version is not null)
			update dbo.sysdiagrams set version = @version where diagram_id = @DiagId ;
		return 0
	END
	]]></string>
			<input_param name="@diagramname" jt="-9" type="sysname" inOut="1" />
			<input_param name="@owner_id" jt="4" type="int" inOut="1" />
			<input_param name="@version" jt="4" type="int" inOut="1" />
			<input_param name="@definition" jt="-3" type="varbinary" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="sp_creatediagram" id="Procedure-3f2" isSystem="false" params_known="y" >
			<string><![CDATA[
	CREATE PROCEDURE dbo.sp_creatediagram
	(
		@diagramname 	sysname,
		@owner_id		int	= null, 	
		@version 		int,
		@definition 	varbinary(max)
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
	
		declare @theId int
		declare @retval int
		declare @IsDbo	int
		declare @userName sysname
		if(@version is null or @diagramname is null)
		begin
			RAISERROR (N'E_INVALIDARG', 16, 1);
			return -1
		end
	
		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID(); 
		select @IsDbo = IS_MEMBER(N'db_owner');
		revert; 
		
		if @owner_id is null
		begin
			select @owner_id = @theId;
		end
		else
		begin
			if @theId <> @owner_id
			begin
				if @IsDbo = 0
				begin
					RAISERROR (N'E_INVALIDARG', 16, 1);
					return -1
				end
				select @theId = @owner_id
			end
		end
		-- next 2 line only for test, will be removed after define name unique
		if EXISTS(select diagram_id from dbo.sysdiagrams where principal_id = @theId and name = @diagramname)
		begin
			RAISERROR ('The name is already used.', 16, 1);
			return -2
		end
	
		insert into dbo.sysdiagrams(name, principal_id , version, definition)
				VALUES(@diagramname, @theId, @version, @definition) ;
		
		select @retval = @@IDENTITY 
		return @retval
	END
	]]></string>
			<input_param name="@diagramname" jt="-9" type="sysname" inOut="1" />
			<input_param name="@owner_id" jt="4" type="int" inOut="1" />
			<input_param name="@version" jt="4" type="int" inOut="1" />
			<input_param name="@definition" jt="-3" type="varbinary" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="sp_dropdiagram" id="Procedure-211e" isSystem="false" params_known="y" >
			<string><![CDATA[
	CREATE PROCEDURE dbo.sp_dropdiagram
	(
		@diagramname 	sysname,
		@owner_id	int	= null
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
		declare @theId 			int
		declare @IsDbo 			int
		
		declare @UIDFound 		int
		declare @DiagId			int
	
		if(@diagramname is null)
		begin
			RAISERROR ('Invalid value', 16, 1);
			return -1
		end
	
		EXECUTE AS CALLER;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner'); 
		if(@owner_id is null)
			select @owner_id = @theId;
		REVERT; 
		
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname 
		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1)
			return -3
		end
	
		delete from dbo.sysdiagrams where diagram_id = @DiagId;
	
		return 0;
	END
	]]></string>
			<input_param name="@diagramname" jt="-9" type="sysname" inOut="1" />
			<input_param name="@owner_id" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="sp_helpdiagramdefinition" id="Procedure-2427" isSystem="false" params_known="y" >
			<string><![CDATA[
	CREATE PROCEDURE dbo.sp_helpdiagramdefinition
	(
		@diagramname 	sysname,
		@owner_id	int	= null 		
	)
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		set nocount on
		declare @theId 		int
		declare @IsDbo 		int
		declare @DiagId		int
		declare @UIDFound	int
	
		if(@diagramname is null)
		begin
			RAISERROR (N'E_INVALIDARG', 16, 1);
			return -1
		end
	
		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner');
		if(@owner_id is null)
			select @owner_id = @theId;
		revert; 
	
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname;
		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId ))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1);
			return -3
		end
		select version, definition FROM dbo.sysdiagrams where diagram_id = @DiagId ; 
		return 0
	END
	]]></string>
			<input_param name="@diagramname" jt="-9" type="sysname" inOut="1" />
			<input_param name="@owner_id" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="sp_helpdiagrams" id="Procedure-d58" isSystem="false" params_known="y" >
			<string><![CDATA[
	CREATE PROCEDURE dbo.sp_helpdiagrams
	(
		@diagramname sysname = NULL,
		@owner_id int = NULL
	)
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		DECLARE @user sysname
		DECLARE @dboLogin bit
		EXECUTE AS CALLER;
			SET @user = USER_NAME();
			SET @dboLogin = CONVERT(bit,IS_MEMBER('db_owner'));
		REVERT;
		SELECT
			[Database] = DB_NAME(),
			[Name] = name,
			[ID] = diagram_id,
			[Owner] = USER_NAME(principal_id),
			[OwnerID] = principal_id
		FROM
			sysdiagrams
		WHERE
			(@dboLogin = 1 OR USER_NAME(principal_id) = @user) AND
			(@diagramname IS NULL OR name = @diagramname) AND
			(@owner_id IS NULL OR principal_id = @owner_id)
		ORDER BY
			4, 5, 1
	END
	]]></string>
			<input_param name="@diagramname" jt="-9" type="sysname" inOut="1" />
			<input_param name="@owner_id" jt="4" type="int" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="sp_renamediagram" id="Procedure-19b2" isSystem="false" params_known="y" >
			<string><![CDATA[
	CREATE PROCEDURE dbo.sp_renamediagram
	(
		@diagramname 		sysname,
		@owner_id		int	= null,
		@new_diagramname	sysname
	
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
		declare @theId 			int
		declare @IsDbo 			int
		
		declare @UIDFound 		int
		declare @DiagId			int
		declare @DiagIdTarg		int
		declare @u_name			sysname
		if((@diagramname is null) or (@new_diagramname is null))
		begin
			RAISERROR ('Invalid value', 16, 1);
			return -1
		end
	
		EXECUTE AS CALLER;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner'); 
		if(@owner_id is null)
			select @owner_id = @theId;
		REVERT;
	
		select @u_name = USER_NAME(@owner_id)
	
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname 
		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1)
			return -3
		end
	
		-- if((@u_name is not null) and (@new_diagramname = @diagramname))	-- nothing will change
		--	return 0;
	
		if(@u_name is null)
			select @DiagIdTarg = diagram_id from dbo.sysdiagrams where principal_id = @theId and name = @new_diagramname
		else
			select @DiagIdTarg = diagram_id from dbo.sysdiagrams where principal_id = @owner_id and name = @new_diagramname
	
		if((@DiagIdTarg is not null) and  @DiagId <> @DiagIdTarg)
		begin
			RAISERROR ('The name is already used.', 16, 1);
			return -2
		end		
	
		if(@u_name is null)
			update dbo.sysdiagrams set [name] = @new_diagramname, principal_id = @theId where diagram_id = @DiagId
		else
			update dbo.sysdiagrams set [name] = @new_diagramname where diagram_id = @DiagId
		return 0
	END
	]]></string>
			<input_param name="@diagramname" jt="-9" type="sysname" inOut="1" />
			<input_param name="@owner_id" jt="4" type="int" inOut="1" />
			<input_param name="@new_diagramname" jt="-9" type="sysname" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="sp_upgraddiagrams" id="Procedure-2257" isSystem="false" params_known="y" >
			<string><![CDATA[
	CREATE PROCEDURE dbo.sp_upgraddiagrams
	AS
	BEGIN
		IF OBJECT_ID(N'dbo.sysdiagrams') IS NOT NULL
			return 0;
	
		CREATE TABLE dbo.sysdiagrams
		(
			name sysname NOT NULL,
			principal_id int NOT NULL,	-- we may change it to varbinary(85)
			diagram_id int PRIMARY KEY IDENTITY,
			version int,
	
			definition varbinary(max)
			CONSTRAINT UK_principal_name UNIQUE
			(
				principal_id,
				name
			)
		);

		/* Add this if we need to have some form of extended properties for diagrams */
		/*
		IF OBJECT_ID(N'dbo.sysdiagram_properties') IS NULL
		BEGIN
			CREATE TABLE dbo.sysdiagram_properties
			(
				diagram_id int,
				name sysname,
				value varbinary(max) NOT NULL
			)
		END
		*/
		IF OBJECT_ID(N'dbo.dtproperties') IS NOT NULL
		begin
			insert into dbo.sysdiagrams
			(
				[name],
				[principal_id],
				[version],
				[definition]
			)
			select	 
				convert(sysname, dgnm.[uvalue]),
				DATABASE_PRINCIPAL_ID(N'dbo'),			-- will change to the sid of sa
				0,							-- zero for old format, dgdef.[version],
				dgdef.[lvalue]
			from dbo.[dtproperties] dgnm
				inner join dbo.[dtproperties] dggd on dggd.[property] = 'DtgSchemaGUID' and dggd.[objectid] = dgnm.[objectid]	
				inner join dbo.[dtproperties] dgdef on dgdef.[property] = 'DtgSchemaDATA' and dgdef.[objectid] = dgnm.[objectid]
				
			where dgnm.[property] = 'DtgSchemaNAME' and dggd.[uvalue] like N'_EA3E6268-D998-11CE-9454-00AA00A3F36E_' 
			return 2;
		end
		return 1;
	END
	]]></string>
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<procedure name="usp_regionsDML" id="Procedure-15ce" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE PROCEDURE usp_regionsDML
@sqltype varchar(10), 
@regId int = NULL,
@regName varchar(50) = NULL
AS
BEGIN
IF @sqltype = 'INSERT' AND @regId IS NOT NULL AND @regName IS NOT NULL
INSERT INTO dbo.regions values (@regId, @regName)
ELSE IF @sqltype = 'UPDATE' AND @regId IS NOT NULL AND @regName IS NOT NULL
UPDATE dbo.regions SET region_name  = @regName
WHERE regions.region_id = @regId
ELSE IF @sqltype =  'DELETE' AND @regId IS NOT NULL
DELETE FROM dbo.regions 
WHERE regions.region_id = @regId
ELSE
PRINT 'Invalid Data' 
END
]]></string>
			<input_param name="@sqltype" jt="12" type="varchar" inOut="1" />
			<input_param name="@regId" jt="4" type="int" inOut="1" />
			<input_param name="@regName" jt="12" type="varchar" inOut="1" />
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</procedure>
		<function name="fn_diagramobjects" id="Function-9b0" isSystem="false" params_known="y" >
			<string><![CDATA[
	CREATE FUNCTION dbo.fn_diagramobjects() 
	RETURNS int
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		declare @id_upgraddiagrams		int
		declare @id_sysdiagrams			int
		declare @id_helpdiagrams		int
		declare @id_helpdiagramdefinition	int
		declare @id_creatediagram	int
		declare @id_renamediagram	int
		declare @id_alterdiagram 	int 
		declare @id_dropdiagram		int
		declare @InstalledObjects	int
		select @InstalledObjects = 0
		select 	@id_upgraddiagrams = object_id(N'dbo.sp_upgraddiagrams'),
			@id_sysdiagrams = object_id(N'dbo.sysdiagrams'),
			@id_helpdiagrams = object_id(N'dbo.sp_helpdiagrams'),
			@id_helpdiagramdefinition = object_id(N'dbo.sp_helpdiagramdefinition'),
			@id_creatediagram = object_id(N'dbo.sp_creatediagram'),
			@id_renamediagram = object_id(N'dbo.sp_renamediagram'),
			@id_alterdiagram = object_id(N'dbo.sp_alterdiagram'), 
			@id_dropdiagram = object_id(N'dbo.sp_dropdiagram')
		if @id_upgraddiagrams is not null
			select @InstalledObjects = @InstalledObjects + 1
		if @id_sysdiagrams is not null
			select @InstalledObjects = @InstalledObjects + 2
		if @id_helpdiagrams is not null
			select @InstalledObjects = @InstalledObjects + 4
		if @id_helpdiagramdefinition is not null
			select @InstalledObjects = @InstalledObjects + 8
		if @id_creatediagram is not null
			select @InstalledObjects = @InstalledObjects + 16
		if @id_renamediagram is not null
			select @InstalledObjects = @InstalledObjects + 32
		if @id_alterdiagram  is not null
			select @InstalledObjects = @InstalledObjects + 64
		if @id_dropdiagram is not null
			select @InstalledObjects = @InstalledObjects + 128
		
		return @InstalledObjects 
	END
	]]></string>
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</function>
		<function name="udf_listOfEmployees" id="Function-e4e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE FUNCTION dbo.udf_listOfEmployees(@department_name varchar(25))
RETURNS TABLE
AS
RETURN
SELECT e.first_name,e.last_name ,d.department_name
FROM dbo.employees AS e
INNER JOIN dbo.departments AS d
ON d.department_id = e.department_id
WHERE d.department_name = @department_name]]></string>
			<input_param name="@TABLE_RETURN_VALUE" jt="0" type="table" inOut="3" />
		</function>
		<function name="udf_numOfEmpPerDep" id="Function-8d1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE FUNCTION dbo.udf_numOfEmpPerDep(@department_name varchar(25))
RETURNS INT
AS BEGIN
RETURN(
SELECT COUNT(e.employee_id)
FROM dbo.employees AS e
INNER JOIN dbo.departments AS d
ON d.department_id = e.department_id
WHERE d.department_name = @department_name
)
END]]></string>
			<result_param name="@RETURN_VALUE" jt="4" type="int" />
		</function>
	</schema>
	<layout name="Main Layout" id="Layout-1f60" show_relation="columns" >
		<entity schema="HR.dbo" name="DeptByState" color="BED3F4" x="976" y="80" />
		<entity schema="HR.dbo" name="countries" color="C7F4BE" x="496" y="256" />
		<entity schema="HR.dbo" name="departments" color="C7F4BE" x="496" y="560" />
		<entity schema="HR.dbo" name="dependents" color="C7F4BE" x="48" y="560" />
		<entity schema="HR.dbo" name="empdep" color="BED3F4" x="1216" y="80" />
		<entity schema="HR.dbo" name="employees" color="C7F4BE" x="272" y="256" />
		<entity schema="HR.dbo" name="jobs" color="C7F4BE" x="272" y="560" />
		<entity schema="HR.dbo" name="locations" color="C7F4BE" x="720" y="256" />
		<entity schema="HR.dbo" name="regions" color="C7F4BE" x="288" y="80" />
		<entity schema="HR.dbo" name="sysdiagrams" color="BED3F4" x="1216" y="272" />
		<callout x="272" y="112" pointer="Round" >
			<comment><![CDATA[This is a layout. A table may show in multiple layouts.
Create further layouts by clicking the '+' tab. 
Double-click any table header to edit.
The layouts and the schema structure will be saved to the design model file.]]></comment>
		</callout>
		<group name="DeptByState" color="ECF0F7" >
			<entity schema="HR.dbo" name="DeptByState" />
			<entity schema="HR.dbo" name="empdep" />
			<entity schema="HR.dbo" name="sysdiagrams" />
		</group>
		<group name="jobs" color="EEF7EC" >
			<entity schema="HR.dbo" name="jobs" />
			<entity schema="HR.dbo" name="regions" />
			<entity schema="HR.dbo" name="dependents" />
			<entity schema="HR.dbo" name="countries" />
			<entity schema="HR.dbo" name="departments" />
			<entity schema="HR.dbo" name="locations" />
			<entity schema="HR.dbo" name="employees" />
		</group>
	</layout>
	<layout name="~Layout with Sample Tools" id="Layout-8d8" show_column_type="y" show_relation="columns" >
		<entity schema="HR.dbo" name="DeptByState" color="BED3F4" x="1200" y="48" />
		<entity schema="HR.dbo" name="countries" color="C7F4BE" x="608" y="224" />
		<entity schema="HR.dbo" name="departments" color="C7F4BE" x="608" y="528" />
		<entity schema="HR.dbo" name="dependents" color="C7F4BE" x="48" y="528" />
		<entity schema="HR.dbo" name="empdep" color="BED3F4" x="1504" y="48" />
		<entity schema="HR.dbo" name="employees" color="C7F4BE" x="320" y="224" />
		<entity schema="HR.dbo" name="jobs" color="C7F4BE" x="320" y="528" />
		<entity schema="HR.dbo" name="locations" color="C7F4BE" x="880" y="224" />
		<entity schema="HR.dbo" name="regions" color="C7F4BE" x="336" y="48" />
		<entity schema="HR.dbo" name="sysdiagrams" color="BED3F4" x="1504" y="240" />
		<script name="SQL Editor" id="Editor-b43" language="SQL" >
			<string><![CDATA[SELECT
	employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, manager_id, department_id
FROM
	HR.dbo.employees s;
GO]]></string>
		</script>
		<browser id="Browse-1eb6" name="Relational Data Editor" confirm_updates="y" >
			<browse_table schema="HR.dbo" entity="employees" x="20" y="20" width="270" height="-60" >
				<browse_table schema="HR.dbo" entity="dependents" fk="FK__dependent__emplo__412EB0B6" x="310" y="20" width="500" height="350" />
			</browse_table>
		</browser>
		<query id="Query-264f" name="Query Builder" >
			<query_table schema="HR.dbo" name="employees" alias="e" x="48" y="48" >
				<column name="employee_id" />
				<column name="first_name" />
				<column name="last_name" />
				<column name="email" />
				<column name="phone_number" />
				<column name="hire_date" />
				<column name="job_id" />
				<column name="salary" />
				<column name="manager_id" />
				<column name="department_id" />
				<query_table schema="HR.dbo" name="dependents" alias="d" x="272" y="48" fk="FK__dependent__emplo__412EB0B6" type="Inner Join" >
					<column name="dependent_id" />
					<column name="first_name" />
					<column name="last_name" />
					<column name="relationship" />
					<column name="employee_id" />
				</query_table>
			</query_table>
		</query>
	</layout>
</project>